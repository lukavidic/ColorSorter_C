digraph "readColor"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="readColor",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Read averaged normalized color and detect name."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="detect_color",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#a719575f5040d8125173aae2c42138fc7",tooltip="Determine closest matching color name."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="calculate_distance",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#a1605896c4d3b3b9e2cfd2bd4ba0e013b",tooltip="Compute Euclidean distance between two RGB vectors."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="request_data",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#aec77d8883de54418f21f5e7059c25427",tooltip="Send a command and read one 16-bit register."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="I2C_start",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#a263c74ce484e3680c05a9118707fadb7",tooltip="Initiate I2C START condition and wait for completion."];
  Node4 -> Node6 [id="edge5_Node000004_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="I2C_stop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#af8dcc1bcb3e1c6c0fcdca4cf599a239b",tooltip="Initiate I2C STOP condition and wait for completion."];
  Node4 -> Node7 [id="edge6_Node000004_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="I2C_write",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#a2a3fba87633c9fe1a4716be7b558fb21",tooltip="Write one byte over I2C and wait for ACK."];
  Node4 -> Node8 [id="edge7_Node000004_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="package_receive",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#a70fabcf7a30ad44b555a17d873b65635",tooltip="Receive a two-byte data package over I2C."];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="I2C_receive_enable",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_v_e_m_l3328_8c.html#ab448250e4ec10b4e9405e409276aa27b",tooltip="Enable I2C receive mode and wait for data."];
}
